---
source: semigroup_derive/src/construction.rs
assertion_line: 70
expression: formatted
---
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::semigroup::Monoid for Concat<T>
where
    Self: Default,
{
    fn identity() -> Self {
        Default::default()
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::semigroup::Semigroup for Concat<T> {
    fn op(base: Self, other: Self) -> Self {
        ::semigroup::Annotated::lift_unit_annotated_op(
            (base, vec![(); 0]),
            (other, vec![(); 0]),
        )
    }
}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ::semigroup::Annotate<X> for Concat<T>
where
    X::Item: Clone,
{
    type Annotation = X;
    fn annotated(self, annotation: Self::Annotation) -> ::semigroup::Annotated<Self, X> {
        ::semigroup::Annotated::new(self, annotation)
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> From<T> for Concat<T> {
    fn from(value: T) -> Self {
        Concat(value)
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::Deref for Concat<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::DerefMut for Concat<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::semigroup::Construction<T>
for Concat<T> {
    fn into_inner(self) -> T {
        self.0
    }
}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ::semigroup::ConstructionAnnotated<T, X> for Concat<T>
where
    X::Item: Clone,
{}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::semigroup::ConstructionMonoid<T>
for Concat<T>
where
    Self: ::semigroup::Monoid,
{}
