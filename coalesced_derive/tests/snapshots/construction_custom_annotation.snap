---
source: coalesced_derive/src/construction.rs
assertion_line: 70
expression: formatted
---
pub trait ConcatExt: Sized + Semigroup {
    fn concat(self, other: Self) -> Self {
        ::coalesced::Semigroup::semigroup_op(self, other)
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ConcatExt for Concat<T> {}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ConcatExt
for ::coalesced::Reverse<Concat<T>> {}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ConcatExt for ::coalesced::Annotated<Concat<T>, X>
where
    X::Item: Clone,
{}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ConcatExt for ::coalesced::Reverse<::coalesced::Annotated<Concat<T>, X>>
where
    X::Item: Clone,
{}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::coalesced::Semigroup for Concat<T> {
    fn semigroup_op(base: Self, other: Self) -> Self {
        Self::default_semigroup_op(base, other, vec![(); 0], vec![(); 0])
    }
}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ::coalesced::Annotate<X> for Concat<T>
where
    X::Item: Clone,
{
    type Annotation = X;
    fn annotated(self, annotation: Self::Annotation) -> ::coalesced::Annotated<Self, X> {
        ::coalesced::Annotated::new(self, annotation)
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> From<T> for Concat<T> {
    fn from(value: T) -> Self {
        Concat(value)
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::Deref for Concat<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::DerefMut for Concat<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
#[automatically_derived]
impl<T: IntoIterator + FromIterator<T::Item>> ::coalesced::op::Construction<T>
for Concat<T> {
    fn into_inner(self) -> T {
        self.0
    }
}
#[automatically_derived]
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> ::coalesced::op::ConstructionAnnotated<T, X> for Concat<T>
where
    X::Item: Clone,
{}
