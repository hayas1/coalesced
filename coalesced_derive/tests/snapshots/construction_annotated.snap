---
source: coalesced_derive/src/construction.rs
assertion_line: 70
expression: formatted
---
pub trait CoalesceExt: Sized + Semigroup {
    fn coalesce(self, other: Self) -> Self {
        ::coalesced::Semigroup::semigroup_op(self, other)
    }
}
#[automatically_derived]
impl<T> CoalesceExt for Coalesce<T> {}
#[automatically_derived]
impl<T> CoalesceExt for ::coalesced::Reverse<Coalesce<T>> {}
#[automatically_derived]
impl<T, A> CoalesceExt for ::coalesced::Annotated<Coalesce<T>, A> {}
#[automatically_derived]
impl<T, A> CoalesceExt for ::coalesced::Reverse<::coalesced::Annotated<Coalesce<T>, A>> {}
#[automatically_derived]
impl<T> ::coalesced::Semigroup for Coalesce<T> {
    fn semigroup_op(base: Self, other: Self) -> Self {
        Self::default_semigroup_op(base, other, (), ())
    }
}
#[automatically_derived]
impl<T, A> ::coalesced::Annotate<A> for Coalesce<T> {
    type Annotation = A;
    fn annotated(self, annotation: Self::Annotation) -> ::coalesced::Annotated<Self, A> {
        ::coalesced::Annotated::new(self, annotation)
    }
}
#[automatically_derived]
impl<T> From<Option<T>> for Coalesce<T> {
    fn from(value: Option<T>) -> Self {
        Coalesce(value)
    }
}
#[automatically_derived]
impl<T> std::ops::Deref for Coalesce<T> {
    type Target = Option<T>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
#[automatically_derived]
impl<T> std::ops::DerefMut for Coalesce<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
#[automatically_derived]
impl<T> ::coalesced::op::Construction<Option<T>> for Coalesce<T> {
    fn into_inner(self) -> Option<T> {
        self.0
    }
}
#[automatically_derived]
impl<T, A> ::coalesced::op::ConstructionAnnotated<Option<T>, A> for Coalesce<T> {}
