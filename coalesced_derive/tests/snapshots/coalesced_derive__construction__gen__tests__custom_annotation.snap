---
source: coalesced_derive/src/construction/gen.rs
assertion_line: 67
expression: formatted
---
pub trait Coalesce: Sized + Semigroup {
    fn coalesce(self, other: Self) -> Self {
        ::coalesced::Semigroup::semigroup_op(self, other)
    }
}
impl<T: IntoIterator + FromIterator<T::Item>> Coalesce for Concatenated<T> {}
impl<T: IntoIterator + FromIterator<T::Item>> Coalesce
for ::coalesced::op::reverse::Reversed<Concatenated<T>> {}
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> Coalesce for ::coalesced::Annotated<Concatenated<T>, X> {}
impl<
    T: IntoIterator + FromIterator<T::Item>,
    X: IntoIterator + FromIterator<X::Item>,
> Coalesce
for ::coalesced::op::reverse::Reversed<::coalesced::Annotated<Concatenated<T>, X>> {}
impl<T: IntoIterator + FromIterator<T::Item>> ::coalesced::Semigroup
for Concatenated<T> {
    fn semigroup_op(base: Self, other: Self) -> Self {
        Self::default_semigroup_op(base, other, vec![(); 0], vec![(); 0])
    }
}
impl<T: IntoIterator + FromIterator<T::Item>> From<T> for Concatenated<T> {
    fn from(value: T) -> Self {
        Concatenated(value)
    }
}
impl<T: IntoIterator + FromIterator<T::Item>> Concatenated<T> {
    pub fn into_inner(self) -> T {
        self.0
    }
}
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::Deref for Concatenated<T> {
    type Target = T;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<T: IntoIterator + FromIterator<T::Item>> std::ops::DerefMut for Concatenated<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}
